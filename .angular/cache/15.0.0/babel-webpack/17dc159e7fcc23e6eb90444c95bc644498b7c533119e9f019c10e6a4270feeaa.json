{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { ToDoService } from './ToDoService';\nimport { ToDoItem } from './ToDoItem';\nimport { User } from './User';\nimport { DataService } from \"./data.service\";\nimport { CookieService } from \"ngx-cookie-service\";\nlet ItemsComponent = class ItemsComponent {\n  todoService;\n  dataService;\n  cookie;\n  constructor(todoService, dataService, cookie) {\n    this.todoService = todoService;\n    this.dataService = dataService;\n    this.cookie = cookie;\n  }\n  ngOnDestroy() {\n    this.cookie.delete(\"userId\");\n  }\n  ngOnInit() {\n    let cook = this.cookie.get(\"userId\");\n    if (cook) {\n      this.haveValues = !this.haveValues;\n      this.haveName = !this.haveName;\n    }\n    console.log(cook);\n  }\n  tempUserId;\n  tempUserLogin;\n  tempUserPassword;\n  doListItems;\n  userCreate = new User(\"\", \"\", 0, \"\", \"\", \"\", \"\");\n  haveValues = true;\n  haveName = false;\n  item = new ToDoItem(0, 0, \" \", \" \", \" \");\n  setUserId() {\n    this.dataService.UserIdFromService(this.tempUserId);\n  }\n  getItems() {\n    this.tempUserId = this.cookie.get(\"UserId\");\n    if (this.tempUserId) {\n      this.todoService.getDoLists(this.tempUserId).subscribe({\n        next: data => {\n          this.doListItems = data;\n          this.doListItems = this.setPriority(this.doListItems);\n          console.log(this.doListItems);\n        },\n        error: error => console.log(error)\n      });\n    } else {\n      console.log(\"Error, not found ID\");\n      //this.haveValues = !this.haveValues;\n      //this.haveName = !this.haveName;\n    }\n  }\n\n  setPriority(items) {\n    this.doListItems.forEach(function (value) {\n      switch (value.Priority) {\n        case 0:\n          value.stringPriority = \"Высокий\";\n          break;\n        case 1:\n          value.stringPriority = \"Средний\";\n          break;\n        case 2:\n          value.stringPriority = \"Низкий\";\n          break;\n      }\n    });\n    return this.doListItems;\n  }\n  logout() {\n    this.cookie.delete(\"UserId\");\n    this.haveValues = !this.haveValues;\n    this.haveName = !this.haveName;\n  }\n  createUser(user) {\n    this.userCreate.login = this.tempUserLogin;\n    this.userCreate.password = this.tempUserPassword;\n    this.todoService.createrUser(user).subscribe();\n  }\n  getUserId(userLogin, userPassword) {\n    this.todoService.getUserId(userLogin, userPassword).subscribe({\n      next: data => {\n        this.tempUserId = data.value;\n        this.cookie.set(\"UserId\", data.value);\n      },\n      error: error => console.log(error)\n    });\n    if (this.tempUserId) {\n      this.haveValues = !this.haveValues;\n      this.haveName = !this.haveName;\n    }\n  }\n  setName() {\n    this.userCreate.firstName = \"Max\";\n    this.userCreate.login = \"max\";\n    this.haveName = true;\n    console.log(this.haveName);\n  }\n  saveToDo(item) {\n    item.userId = this.tempUserId;\n    console.log(item.userId);\n    this.todoService.createToDoItem(item).subscribe({\n      next: data => {\n        console.log(this.item.Case + \" sending\");\n      },\n      error: error => console.log(error)\n    });\n    item.Case = \"\";\n    item.Id = 0;\n  }\n  changeToDo(doItem) {\n    doItem.Case = this.item.Case;\n    doItem.Priority = this.item.Priority;\n    doItem.userId = this.tempUserId;\n    this.todoService.changeDoList(doItem).subscribe({\n      error: error => console.log(error)\n    });\n  }\n  logToDo() {\n    console.log(this.item.Id + \"_\" + this.item.Case);\n  }\n};\nItemsComponent = __decorate([Component({\n  selector: 'items-comp',\n  templateUrl: './items.component.html',\n  styleUrls: ['./items.component.css'],\n  providers: [ToDoService, DataService, CookieService]\n})], ItemsComponent);\nexport { ItemsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}